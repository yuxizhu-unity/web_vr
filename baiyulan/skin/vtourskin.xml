<krpano version="1.20" logkey="true" showerrors="true" debugmode="true">

	<!-- krpano 1.20.3 - Virtual Tour Skin -->

	<!-- skin settings (can be overridden in the tour.xml) -->
	<skin_settings gyro="true"
	               gyro_keeplookingdirection="false"
	               webvr="true"
	               webvr_keeplookingdirection="true"
	               webvr_prev_next_hotspots="true"
	               autotour="true"
	               littleplanetintro="false"
	               followmousecontrol="false"
	               title="true"
	               thumbs_width="80"
				   thumbs_height="80"
				   thumbs_padding="10"
				   thumbs_crop="0|40|240|160"
	               thumbs_opened="true"
	               thumbs_text="true"
	               thumbs_dragging="true"
	               thumbs_onhoverscrolling="false"
	               thumbs_loop="false"
	               tooltips_buttons="false"
	               tooltips_thumbs="false"
	               tooltips_hotspots="true"
	               deeplinking="false"
	               loadscene_flags="MERGE"
	               loadscene_blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)"
	               loadscene_blend_prev="SLIDEBLEND(0.5, 180, 0.75, linear)"
	               loadscene_blend_next="SLIDEBLEND(0.5,   0, 0.75, linear)"
	               loadingtext="加载中..."
	               layout_width="100%"
	               layout_maxwidth="100%"
	               controlbar_height="40"
	               controlbar_offset="0"
	               design_skin_images="vtourskin.png"
	               design_thumbborder_bgborder="3 0xFFFFFF 1.0"
	               design_thumbborder_padding="2"
	               design_thumbborder_bgroundedge="0"
	               design_text_css="color:#FFFFFF; font-family:Arial;"
	               design_text_shadow="1"
	               />


	<!-- save the url path of this xml file (the url value will be adjusted during xml parsing) -->
	<vtourskinxmlpath url="./" />

	<!-- iPhone X safe-area support: use the horizontal safe-area only -->	
	<display safearea="h-only" />

	<!-- style -->
	<include url="./style.xml"/>
	<!-- vr -->
	<include url="./vr.xml"/>
	<!-- menu context -->
	<include url="./menu_context.xml"/>

	<!-- mouse / touch / keyboard(button) control settings - https://krpano.com/docu/xml/#control -->
	<control mouse="drag"
	         touch="drag"
	         zoomtocursor="false"
	         zoomoutcursor="false"
	         draginertia="0.1"
	         dragfriction="0.9"
	         movetoaccelerate="1.0"
	         movetospeed="10.0"
	         movetofriction="0.8"
	         keybaccelerate="0.09"
	         keybfriction="0.94"
	         keybfovchange="0.25"
	         mousefovchange="1.0"
	         fovspeed="3.0"
	         fovfriction="0.9"
	         bouncinglimits="true"
	         />

	<!-- mouse cursors - https://krpano.com/docu/xml/#cursors -->
	<cursors standard="default"
	         dragging="move"
	         moving="move"
	         />


	<!-- ensure stagescale 2x for mobile devices (regardless if mobilescale is 0.5 or 1.0) -->
	<krpano stagescale="calc:stagescale * 2" if="stagescale LT 1.0" devices="mobile" />
	


	<!--
		do_crop_animation(framewidth, frameheight, framerate)
		- animation by changing the image cropping
		- parameters:
		  - framewidth - the width from one frame in pixels
		  - frameheight - the height from one frame in pixels
		  - framerate - the animation frame rate in 'frames per second'
		- the image can be a vertical or horizontal (or both) image-strip / sprite-sheet
		- the action will loop automatically through all frames from left to right and top to bottom
	-->
	<action name="do_crop_animation" scope="local" args="framewidth, frameheight, framerate">
		<!-- define local variables -->
		calc(local.xframes, (caller.imagewidth /framewidth) BOR 0);
		calc(local.frames, xframes * ((caller.imageheight / frameheight) BOR 0));
		def(local.frame, integer, 0);
		
		<!-- set the first frame -->
		calc(caller.crop, '0|0|' + framewidth + '|' + frameheight);
		
		<!-- do the animation -->
		setinterval(calc('crop_anim_' + caller.name), calc(1.0 / framerate),
			if(caller.loaded,
				inc(frame);
				if(frame GE frames, if(caller.onlastframe !== null, callwith(caller, onlastframe() ) ); set(frame,0); );
				mod(xpos, frame, xframes);
				div(ypos, frame, xframes);
				Math.floor(ypos);
				mul(xpos, framewidth);
				mul(ypos, frameheight);
				calc(caller.crop, xpos + '|' + ypos + '|' + framewidth + '|' + frameheight);
			  ,
				<!-- stop the interval when the hotspot gets removed -->
				clearinterval(calc('crop_anim_' + caller.name));
			);
		);
	</action>

	<action name="skin_hotspotstyle_setup" scope="local">
		if(caller.linkedscene AND skin_settings.tooltips_hotspots,
			copy(caller.tooltip, scene[get(caller.linkedscene)].title);
			caller.loadstyle(skin_tooltips);
		);
	</action>

	<action name="skin_hotspotstyle_click" scope="local">
		if(caller.linkedscene,
			copy(hs_linkedscene, caller.linkedscene);
			if(caller.linkedscene_lookat, txtsplit(caller.linkedscene_lookat, ',', hs_lookat_h, hs_lookat_v, hs_lookat_fov); );
			set(caller.enabled, false);
			skin_hidetooltips();
			tween(caller.depth|caller.alpha|caller.oy|caller.rx, 4000|0.0|-50|-60, 0.5, default,
				skin_loadscene(get(hs_linkedscene), get(skin_settings.loadscene_blend));
				if(hs_lookat_h !== null, skin_lookat(get(hs_lookat_h), get(hs_lookat_v), get(hs_lookat_fov)); );
				skin_updatescroll();
			);
		);
	</action>
	

	<!-- gyro plugin -->
	<plugin name="skin_gyro" keep="true" url="" html5_url="%VIEWER%/plugins/gyro2.js" softstart="1.0" desktopsupport="false" enabled="false" onavailable="arrange_buttons();" devices="html5" />


	<!-- skin events -->
	<events name="skin_events" keep="true"
	        onxmlcomplete="set(events[skin_events].onxmlcomplete, skin_showloading(true); ); skin_showloading(true); skin_startup();"
	        onnewpano="skin_update_scene_infos(); skin_deeplinking_update_url();"
	        onloadcomplete="skin_showloading(false);"
	        onidle="skin_deeplinking_update_url();"
	        onresize="onresize();"
	        onenterfullscreen.fullscreensupport="set(layer[btn_fs].visible, true);"
	        onexitfullscreen.fullscreensupport="set(layer[btn_fs].visible, false);"
	        onkeydown="skin_keydown_event();"
	        />


	<!-- skin actions -->
	<action name="skin_startup" scope="local">

		<!-- apply skin settings on startup -->
		if(skin_settings.thumbs_opened,
			set(layer[skin_thumbs].state, 'opened');
			set(layer[skin_thumbs_container].visible, true);
			set(layer[skin_collects].state, 'opened');
			set(layer[skin_collects_container].visible, true);
		);
		copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);
		copy(layer[skin_collects].draggable, skin_settings.thumbs_dragging);
		if(skin_settings.thumbs_onhoverscrolling AND device.mouse,
			set(layer[skin_thumbs].draggable, false);
			set(layer[skin_thumbs].onhover_autoscrolling, true);
			set(layer[skin_collects].draggable, false);
			set(layer[skin_thumbs].onhover_autoscrolling, true);
		);

		if(skin_settings.gyro AND !device.desktop AND device.html5,
			copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url);
		);


		if(skin_settings.littleplanetintro AND !global.startactions AND (device.webgl OR device.flash),
			skin_setup_littleplanetintro();
		);

		load_thumbs();
		load_collects();
		onresize();
		skin_updatescroll();

		set(layer[skin_layer].visible, true);
	</action>


	<action name="showinfo" scope="local">
		calc(prev, get(layer[info_dialog].visible));
		if(prev, set(layer[info_dialog].visible, false), set(layer[info_dialog].visible, true));
	</action>

	<action name="onhotline" scope="local">
		calc(prev, get(layer[phone_book_dialog].visible));
		if(prev, set(layer[phone_book_dialog].visible, false), set(layer[phone_book_dialog].visible, true));
	</action>

	<action name="load_collects" scope="local">
		def(actualcount, integer, 0);
		copy(thumbwidth, skin_settings.thumbs_width);
		copy(thumbheight, skin_settings.thumbs_height);
		copy(thumbpadding, skin_settings.thumbs_padding);
		copy(thumbcrop, skin_settings.thumbs_crop);
		calc(thumbxoffset, thumbwidth + thumbpadding);
		
		for(set(i,0), i LT scene.count, inc(i),
			if(get(scene[get(i)].collecttitle)!==null AND get(scene[get(i)].collecttype)!==null,
				add(actualcount, 1);
				calc(collectname, 'collect_' + actualcount);
				addlayer(get(collectname));
				set(layer[get(collectname)],
					url=get(scene[get(i)].thumburl),
					keep=true,
					parent='skin_collects',
					align='lefttop',
					crop=get(thumbcrop),
					width=get(thumbwidth),
					height=get(thumbheight),
					x=calc(thumbpadding + (actualcount-1)*thumbxoffset),
					y=get(thumbpadding),
					collecttype=get(scene[get(i)].collecttype),
					onclick='select_collect(get(collecttype), get(name)));'
				);
				
				if(skin_settings.tooltips_thumbs,
					set(layer[get(collectname)].tooltip, get(scene[get(i)].collecttitle) );
					layer[get(collectname)].loadstyle(skin_tooltips);
				);
				if(skin_settings.thumbs_text,
					calc(collecttext, 'skin_collecttext_' + actualcount);
					addlayer(get(collecttext));
					layer[get(collecttext)].loadstyle(skin_thumbtext_style);
					set(layer[get(collecttext)], keep=true, parent=get(collectname), html=get(scene[get(i)].collecttitle) );
				);
			);
		);
		
		calc(thumbbarwidth, thumbxoffset * actualcount + thumbpadding);
		calc(thumbbarheight, thumbpadding + thumbheight + thumbpadding);
		set(layer[skin_collects], width=get(thumbbarwidth), height=get(thumbbarheight));

		if(actualcount == 1,
			set(layer[skin_collects].align, 'lefttop');
		);

		<!-- show first collect -->
		if(actualcount GE 1,
			select_collect(get(layer['collect_1'].collecttype), get(layer['collect_1'].name));
		);
	</action>

	<action name="select_collect" scope="local" args="collecttype, collectname">
		
		def(count, integer, 0);
		copy(thumbwidth, skin_settings.thumbs_width);
		copy(thumbheight, skin_settings.thumbs_height);
		copy(thumbpadding, skin_settings.thumbs_padding);
		calc(thumbxoffset, thumbwidth + thumbpadding);
		for(set(i,0), i LT scene.count, inc(i),
			calc(thumbname, 'skin_thumb_' + i);
			if(layer[get(thumbname)].collecttype===collecttype,
				add(count, 1);
				set(layer[get(thumbname)].visible, true);
				set(layer[get(thumbname)].x, calc(thumbpadding + (count-1)*thumbxoffset));
				,set(layer[get(thumbname)].visible, false);
			);

		);
		calc(thumbbarwidth, thumbxoffset * count + thumbpadding);
		calc(thumbbarheight, thumbpadding + thumbheight + thumbpadding);
		set(layer[skin_thumbs], width=get(thumbbarwidth), height=get(thumbbarheight) );

		<!-- selected -->
		if(layer[get(collectname)],
			trace(get(collectname)); 
			set(layer[collectborder], parent=get(collectname), visible=true);
			,
			set(layer[collectborder].visible, false);
		);
	</action>

	<action name="load_thumbs" scope="local">
		copy(thumbwidth, skin_settings.thumbs_width);
		copy(thumbheight, skin_settings.thumbs_height);
		copy(thumbcrop, skin_settings.thumbs_crop);
		copy(thumbpadding, skin_settings.thumbs_padding);
		
		for(set(i,0), i LT scene.count, inc(i),
			calc(thumbname, 'skin_thumb_' + i);
			addlayer(get(thumbname));

			set(layer[get(thumbname)],
				url=get(scene[get(i)].thumburl),
				keep=true,
				parent='skin_thumbs',
				align='lefttop',
				crop=get(thumbcrop),
				width=get(thumbwidth),
				height=get(thumbheight),
				y=get(thumbpadding)
				visible=false,
				collecttype=get(scene[get(i)].collecttype),
				linkedscene=get(scene[get(i)].name),
				onclick='skin_loadscene(get(linkedscene),get(skin_settings.loadscene_blend));'
			);

			
			
			if(skin_settings.tooltips_thumbs,
				set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );
				layer[get(thumbname)].loadstyle(skin_tooltips);
			);
			if(skin_settings.thumbs_text,
				calc(thumbtext, 'skin_thumbtext_' + i);
				addlayer(get(thumbtext));
				layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
				set(layer[get(thumbtext)], keep=true, parent=get(thumbname), html=get(scene[get(i)].title) );
			);
		);

		if(scene.count == 1,
			set(layer[skin_thumbs].align, 'lefttop');
		);
	</action>

	<action name="skin_togglemenu" scope="local" args="show">
		if(show == null,
			if(layer[skin_collects].state == 'closed', set(show,true), set(show,false));
			if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false));
		);
		if(show,
			set(layer[skin_collects].state, 'opened');
			tween(layer[skin_collects].alpha, 1.0, 0.25);
			tween(layer[skin_collects_scroll_layer].y, 0, 0.5, easeOutQuint);
			set(layer[skin_collects_container].visible, true);
			tween(layer[skin_collects_container].alpha, 1.0, 0.25);

			set(layer[skin_thumbs].state, 'opened');
			tween(layer[skin_thumbs].alpha, 1.0, 0.25);
			tween(layer[skin_thumbs_scroll_layer].y, 120, 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
		  ,
			set(layer[skin_collects].state, 'closed');
			tween(layer[skin_collects].alpha, 0.0, 0.25, easeOutQuint);
			tween(layer[skin_collects_scroll_layer].y, -100, 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););

			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);
			tween(layer[skin_thumbs_scroll_layer].y, -100, 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		);
	</action>


	<action name="skin_setup_littleplanetintro" scope="local">
		skin_hideskin(instant);
		set(global.lpinfo, scene=get(xml.scene), hlookat=get(view.hlookat), vlookat=get(view.vlookat), fov=get(view.fov), fovmax=get(view.fovmax), limitview=get(view.limitview) );
		set(view, fovmax=170, limitview=lookto, vlookatmin=90, vlookatmax=90);
		lookat(calc(global.lpinfo.hlookat - 180), 90, 150, 1, 0, 0);
		set(events[lp_events].onloadcomplete,
			delayedcall(0.5,
				if(lpinfo.scene === xml.scene,
					set(control.usercontrol, off);
					set(view, limitview=get(lpinfo.limitview), vlookatmin=null, view.vlookatmax=null);
					tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lpinfo.hlookat + '|' + lpinfo.vlookat + '|' + lpinfo.fov + '|' + 0.0), 3.0, easeOutQuad);
					delayedcall(3.0,
						set(control.usercontrol, all);
						tween(view.fovmax, get(lpinfo.fovmax));
						skin_deeplinking_update_url();
						delete(global.lpinfo);
						skin_showskin();
						if(skin_settings.thumbs_opened, skin_togglemenu() );
					);
				  ,
					delete(global.lpinfo);
				);
			);
		);
	</action>
	
	
	<action name="skin_lookat" scope="local" args="h, v, fov">
		if(webvr.isenabled,
			<!-- adjust the VR prev/next hotspots for the view change -->
			calc(hlookat_offset, h - view.hlookat);
			add(hotspot[skin_webvr_prev_scene].ath, hlookat_offset);
			add(hotspot[skin_webvr_next_scene].ath, hlookat_offset);
		);
		if(plugin[skin_gyro].isavailable AND plugin[skin_gyro].enabled,
			<!-- reset the gyro tracking -->
			plugin[skin_gyro].resetsensor(get(h));
		);
		<!-- change the view -->
		lookat(get(h), get(v), get(fov));
	</action>

	<action name="onresize" scope="local">
		arrange_buttons();
	</action>


	<!-- determine the visibility of the buttons and calculate their positions -->
	<action name="arrange_buttons" scope="local">
		calc(show_selbuttons, scene.count GT 1);
		calc(show_gyrobutton, plugin[skin_gyro].isavailable == true AND (view.vlookatrange == 180 OR global.lpinfo.scene === xml.scene));
		calc(show_vrbutton,   webvr.isavailable == true);
		calc(show_fsbutton,   device.fullscreensupport == true);
		calc(show_infobutton,   true);
		set(vpos,0);

		set(hpos,0);

		
	</action>


	<action name="skin_updatescroll" scope="local">
		if(layer[skin_thumbs].loaded,
			<!-- set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index)); -->
			<!-- layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
			layer[skin_collects].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby)); -->
		);
	</action>


	<action name="skin_updatethumbscroll" scope="local">
		copy(padding,skin_settings.thumbs_padding);
	</action>


	<action name="skin_update_scene_infos" scope="local">
		if(xml.scene !== null AND scene[get(xml.scene)].index GE 0,

			if(skin_settings.title,
				if(global.title, calc(layer[skin_title].html, global.title + ' - ' + scene[get(xml.scene)].title); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
				delayedcall(0.1, set(layer[skin_title].visible,true) );
			);

			calc(parentname, 'skin_thumb_' + scene[get(xml.scene)].index);
			if(layer[get(parentname)],
				set(layer[thumbborder], parent=get(parentname), visible=true);
			  ,
				set(layer[thumbborder].visible, false);
			);

			if(plugin[skin_gyro].isavailable == true AND view.vlookatrange == 180,
				set(layer[btn_gyro].visible, true);
			  ,
				set(layer[btn_gyro].visible, false)
			);

			if(view.vlookatrange LT 180,
				if(skin_settings.backup_control_bouncinglimits === null,
					copy(skin_settings.backup_control_bouncinglimits, control.bouncinglimits);
				);
				set(control.bouncinglimits, false);
			  ,
				if(skin_settings.backup_control_bouncinglimits !== null,
					copy(control.bouncinglimits, skin_settings.backup_control_bouncinglimits);
				);
			);

		);
	</action>


	<action name="skin_gotoscene" scope="local" args="newscene">
		if(scene[get(newscene)],
			copy(cursceneindex, scene[get(xml.scene)].index);
			copy(newsceneindex, scene[get(newscene)].index);
			skin_loadscene(get(newsceneindex), calc(newsceneindex LT cursceneindex ? skin_settings.loadscene_blend_prev : (newsceneindex GT cursceneindex ? skin_settings.loadscene_blend_next : skin_settings.loadscene_blend)) );
		);
	</action>


	<action name="skin_nextscene" scope="local" args="indexadd">
		add(newsceneindex, scene[get(xml.scene)].index, indexadd);
		if(newsceneindex GE 0 AND newsceneindex LT scene.count,
			skin_loadscene(get(newsceneindex), calc(indexadd LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
		);
	</action>


	<action name="skin_nextscene_loop" scope="local" args="indexadd">
		add(newsceneindex, scene[get(xml.scene)].index, indexadd);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		skin_loadscene(get(newsceneindex), calc(indexadd LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
	</action>


	<action name="skin_loadscene" scope="local" args="newscenenameorindex, blendmode">
		if(webvr.isenabled AND scene.count GT 1,
			set(hotspot[skin_webvr_prev_scene].visible, false);
			set(hotspot[skin_webvr_next_scene].visible, false);
		);

		calc(layer[thumbborder].parent, 'skin_thumb_' + scene[get(newscenenameorindex)].index);
		loadscene(get(scene[get(newscenenameorindex)].name), null, get(skin_settings.loadscene_flags), get(blendmode));
	</action>


	<action name="skin_showloading" scope="private:SKINLOADINGCHECK" args="state">
		if(state == true AND global.display.stereo == false,
			<!-- start loading -->
			set(loadingstate, 1);
			delayedcall(2.0,
				if(loadingstate == 1,
					<!-- after 2.0 seconds still not loaded? => show the loading text -->
					set(global.layer[skin_loadingtext].visible, true);
				);
			);
		  ,
			<!-- stop loading -->
			set(loadingstate, 2);
			set(global.layer[skin_loadingtext].visible, false);
		);
	</action>


	<action name="skin_hidetooltips">
		set(layer[skin_tooltip], alpha=0.0, visible=false);
	</action>


	<action name="skin_buttonglow" scope="local" args="layertoglow, strength">
		if(layertoglow != null,
			if(strength == null, set(strength,0.7));
			set(layer[skin_buttonglow], parent=get(layertoglow), visible=true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow], parent=null, visible=false); );
		);
	</action>


	<action name="skin_calc_opened_closed">
		if(layer[get(name)].y_closed === null,
			set(layer[get(name)].y_opened, get(layer[get(name)].y));
			set(layer[get(name)].y_closed, calc(layer[get(name)].y - skin_settings.controlbar_offset - skin_settings.controlbar_height));
		);
	</action>


	<action name="skin_hideskin" scope="local" args="hidetimemode">
		calc(hidetime, hidetimemode == 'instant' ? 0.0 : 0.5);
		
		callwith(layer[skin_scroll_window],   skin_calc_opened_closed() );
		callwith(layer[bot_control_bar],     skin_calc_opened_closed() );

		if(layer[skin_thumbs].state != 'closed', skin_togglemenu(false); if(hidetime GT 0, wait(0.25)); );

		tween(layer[skin_scroll_window].y,   get(layer[skin_scroll_window  ].y_closed), get(hidetime));
		tween(layer[bot_control_bar].y,     get(layer[bot_control_bar    ].y_closed), get(hidetime));
		
		if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, true);
		delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show].alpha, 0.25, 0.25); );
	</action>


	<action name="skin_showskin">
		tween(layer[skin_scroll_window  ].y, get(layer[skin_scroll_window  ].y_opened));
		tween(layer[bot_control_bar    ].y, get(layer[bot_control_bar    ].y_opened));

		if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, false);
		delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show].alpha, 0.0, 0.0); );
	</action>


	<action name="skin_changethumbs" scope="local" args="show">
		if(show == null,
			if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false));
			if(layer[skin_collects].state == 'closed', set(show,true), set(show,false));
		);
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			tween(layer[skin_thumbs].alpha, 1.0, 0.25);
			tween(layer[skin_thumbs_scroll_layer].height, 100, 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			set(layer[skin_collects].state, 'opened');
			tween(layer[skin_collects].alpha, 1.0, 0.25);
			tween(layer[skin_collects_scroll_layer].height, 100, 0.5, easeOutQuint);
			set(layer[skin_collects_container].visible, true);
			tween(layer[skin_collects_container].alpha, 1.0, 0.25);
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);
			tween(layer[skin_thumbs_scroll_layer].height, 0, 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
			set(layer[skin_collects].state, 'closed');
			tween(layer[skin_collects].alpha, 0.0, 0.25, easeOutQuint);
			tween(layer[skin_collects_scroll_layer].height, 0, 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		);
	</action>



	<action name="skin_keydown_event">
		if(keycode == 33, skin_nextscene_loop(-1) );            	<!-- Page Up   - previous scene -->
		if(keycode == 34, skin_nextscene_loop(+1) );            	<!-- Page Dowm - next scene -->
		if(keycode == 35, skin_gotoscene(calc(scene.count-1)) );	<!-- End       - last scene -->
		if(keycode == 36, skin_gotoscene(0) );                  	<!-- Home/Pos1 - first scene -->
	</action>


	<action name="skin_deeplinking_update_url" scope="local" args="delay">
		if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled === false) AND global.lpinfo === null,
			delayedcall(skin_deeplinking_update, calc(delay == null ? 0.1 : delay), skin_deeplinking_update_url_process() );
		);
	</action>

	<action name="skin_deeplinking_update_url_process" scope="local">
		copy(adr, browser.location);
		indexoftxt(qi, get(adr), '?');
		if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
		copy(si, scene[get(xml.scene)].index);
		copy(h, view.hlookat);
		copy(v, view.vlookat);
		copy(f, view.fov);
		copy(d, view.distortion);
		copy(a, view.architectural);
		clamp(d, 0.0, 1.0);
		clamp(a, 0.0, 1.0);
		set(pp, calc(f LT 10 ? 6 : 2));
		roundval(h, get(pp));
		roundval(v, get(pp));
		roundval(f, get(pp));
		roundval(d, 2);
		roundval(a, 1);
		set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));
		js( history.replaceState(null, document.title, get(adr)); );
	</action>

	
	<!-- autotour/autoplay support -->
	<autorotate enabled="calc:skin_settings.autotour == true"
	            waittime="5.0"
	            accel="0.7"
	            speed="2.0"
	            tofov="80"
	            />
	
	<events name="skin_autotour" keep="true"
		onautorotatestart="skin_autotour_start();"
		onautorotatestop="skin_autotour_stop();"
		onautorotateoneround="skin_nextscene_loop(+1);"
		/>
	
	<action name="skin_autotour_start" scope="PRIVATE:skin_autotour">
		copy(loadscene_flags_backup, global.skin_settings.loadscene_flags);
		set(global.skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|PRELOAD);
		copy(loadscene_blend_next_backup, global.skin_settings.loadscene_blend_next);
		set(global.skin_settings.loadscene_blend_next, SLIDEBLEND(2.0, 0, 0.75, linear) );
	</action>
	
	<action name="skin_autotour_stop" scope="PRIVATE:skin_autotour">
		copy(global.skin_settings.loadscene_flags, loadscene_flags_backup);
		copy(global.skin_settings.loadscene_blend_next, loadscene_blend_next_backup);
	</action>
	
	
	
	<!-- A helper script for getting into fullscreen mode on the iPhone. -->
	
	<events name="iphone_fullscreen_swipe" keep="true" devices="iphone"
			oniphonefullscreen="iphone_fullscreen_swipe();"
			/>
		
	<action name="iphone_fullscreen_swipe" scope="localonly">
		if(global.display.iphonefullscreen GT 0,
			if(!global.layer[iphone_fullscreen_info],
				addlayer('iphone_fullscreen_info', infolayer);
				set(infolayer, type=text, css='color:#FFFFFF; font-size:26px; font-weight:bold; text-align:center;', txtshadow='0 0 8 0x000000 1', mergedalpha=false, bgcolor=0x000000, bgalpha=0.7, bgcapture=true, align=lefttop, x=0, y=0, width=100%, height=100%, vcenter=true, keep=true, zorder=9999, safearea=false);
				if(global.display.iphonefullscreen == 1,
					set(infolayer.html, '[span style="font-size:60px;"]⇡[/span][br]Swipe Up');
				  ,
					set(infolayer.html, '[span style="font-size:60px;"]⇣ ⇡[/span][br]Swipe Down and Up');
				);
			);
		  ,
			removelayer('iphone_fullscreen_info');
		);
	</action>
	

</krpano>
